name: PSThreadJob-ModuleBuild-$(Build.BuildId)
trigger:
  branches:
    include:
    - master
    - release*

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  BUILD_CONFIGURATION: "Release"
  BUILD_FRAMEWORK: "Net461"

# Set AzDevOps Agent to clean the machine after the end of the build
resources:
- repo: self
  clean: true

jobs:
- job: build_windows
  pool: Package ES CodeHub Lab E
#    vmimage: windows-2019

  steps:

  - checkout: self
    clean: true
    persistCredentials: true

  - task: PkgESSetupBuild@10
    displayName: 'Initialize build'
    inputs:
      # Do not create a release share.
      # Enabling this will cause failures!
      useDfs: false
      productName: PSThreadJob
      # Add branch name to build name (only for non-master)
      branchVersion: true
      disableWorkspace: true
      disableBuildTools: true
      disableNugetPack: true

  - powershell: |
      $(Build.SourcesDirectory)\build.ps1 -Bootstrap
      $(Build.SourcesDirectory)\build.ps1 -Configuration $(BUILD_CONFIGURATION) -Framework $(BUILD_FRAMEWORK)
      # Set target folder paths
      $vstsCommandString = "vso[task.setvariable variable=PSThreadJob]$(Build.SourcesDirectory)\PSThreadJob\bin\$(BUILD_CONFIGURATION)\PSThreadJob"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
      $vstsCommandString = "vso[task.setvariable variable=Signed]$(Build.SourcesDirectory)\PSThreadJob\bin\$(BUILD_CONFIGURATION)\Signed"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
      $modVersion = (Import-PowerShellDataFile -Path $(Build.SourcesDirectory)\PSThreadJob\ThreadJob.psd1).ModuleVersion
      $vstsCommandString = "vso[task.setvariable variable=ModVersion]$modVersion"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: Bootstrap & Build

  # Sign the module files
  - task: PkgESCodeSign@10
    displayName: 'CodeSign - module artifacts'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      signConfigXml: '$(Build.SourcesDirectory)\tools\releaseBuild\sign-module-files.xml'
      inPathRoot: '$(PSThreadJob)'
      outPathRoot: '$(Signed)'
      binVersion: Production
      binVersionOverride: ''
    condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

  # Replace the *.psm1, *.ps1, *.psd1, *.dll files with the signed ones
  - powershell: |
      # Show the signed files
      Get-ChildItem -Path $(Signed)
      Copy-Item -Path $(Signed)\* -Destination $(PSThreadJob) -Force
    displayName: 'Replace unsigned files with signed ones'

  # Create catalog file from the signed modules files
  - powershell: |
      New-FileCatalog -CatalogFilePath $(PSThreadJob)\PSThreadJob.cat -Path $(PSThreadJob) -CatalogVersion 2.0 | `
          ForEach-Object -MemberName FullName
    displayName: 'Create catalog file'

  # Sign the catalog file
  - task: PkgESCodeSign@10
    displayName: 'CodeSign - catalog file'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      signConfigXml: '$(Build.SourcesDirectory)\tools\releaseBuild\sign-catalog.xml'
      inPathRoot: '$(PSThreadJob)'
      outPathRoot: '$(Signed)'
      binVersion: Production
      binVersionOverride: ''
    condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

  # Copy the signed catalog file over
  - powershell: |
      # Show the signed files
      Get-ChildItem -Path $(Signed)
      Copy-Item -Path $(Signed)\PSThreadJob.cat -Destination $(PSThreadJob) -Force
    displayName: 'Replace catalog file with the signed one'
    condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

  # Verify the signatures
  - powershell: |
      $HasInvalidFiles = $false
      $WrongCert = @{}
      Get-ChildItem -Path $(PSThreadJob) -Recurse -Include "*.dll","*.ps*1*","*.cat" | `
          Get-AuthenticodeSignature | ForEach-Object {
              $_ | Select-Object Path, Status
              if ($_.Status -ne 'Valid') { $HasInvalidFiles = $true }
              if ($_.SignerCertificate.Subject -notmatch 'CN=Microsoft Corporation.*') {
                  $WrongCert.Add($_.Path, $_.SignerCertificate.Subject)
              }
          }

      if ($HasInvalidFiles) { throw "Authenticode verification failed. There is one or more invalid files." }
      if ($WrongCert.Count -gt 0) {
          $WrongCert
          throw "Certificate should have the subject starts with 'Microsoft Corporation'"
      }
    displayName: 'Verify the signed files'
    condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

  - powershell: |
      $CatInfo = Test-FileCatalog -Path $(PSThreadJob) -CatalogFilePath $(PSThreadJob)\PSThreadJob.cat -Detailed
      $CatInfo | Format-List
      if ($CatInfo.Status -ne "Valid") { throw "Catalog file is invalid." }
    displayName: 'Verify the catalog file'
    condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

  - powershell: |
      Get-ChildItem -Path $(PSThreadJob)
      Write-Host "##vso[artifact.upload containerfolder=PSThreadJob;artifactname=PSThreadJob]$(PSThreadJob)"
    displayName: 'Upload module artifacts'

  - template: templates/compliance.yml
    parameters:
      configuration: $(BUILD_CONFIGURATION)
      framework: $(BUILD_FRAMEWORK)
